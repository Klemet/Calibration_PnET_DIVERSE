Traceback (most recent call last):
  File "/usr/local/lib/python3.10/dist-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.10/dist-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.10/dist-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.10/dist-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.10/dist-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.10/dist-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from functionsForCalibration import *
import json

# We read the markdown content of the previous cell that contains the markdown table with the parameters,
# and we transform it into a Python dictionnary that can be used with the other functions to interact with
# LANDIS-II scenarios.

# Reading species core parameters
# We add the Landis Data parameter indication
coreSpeciesParameters = dict()
coreSpeciesParameters['LandisData'] = 'Species'
markdownText = read_markdown_cell("./3.Initial_Species_Parameters.ipynb", 8)
markdownTable = extract_table(markdownText)
coreSpeciesParameters.update(parseTableSpeciesParameters(markdownTable))

# print(coreSpeciesParameters)

# Reading PnET Species Parameters
# We format the dictionnary for use with the other functions
PnETSpeciesParametersFinal = dict()
PnETSpeciesParametersFinal ['LandisData'] = 'PnETSpeciesParameters'
PnETSpeciesParametersFinal['PnETSpeciesParameters'] = PnETSpeciesParameters
markdownText = read_markdown_cell("./3.Initial_Species_Parameters.ipynb", 12)
markdownTable = extract_table(markdownText)
PnETSpeciesParameters.update(parseTableSpeciesParameters(markdownTable))

# print(PnETSpeciesParametersFinal)

# Species generic parameters
# We add the Landis Data parameter indicator and another needed for this parameter file
genericParameters = dict()
genericParameters['LandisData'] = 'PnETGenericParameters'
genericParameters['PnETGenericParameters'] = 'Value'
markdownText = read_markdown_cell("./3.Initial_Species_Parameters.ipynb", 10)
markdownTable = extract_table(markdownText)
genericParameters.update(parseTableGenericParameters(markdownTable))

# print(genericParameters)

# Generic parameters
# We're going to add these to the generic species parameters to be in one single dict to create the parameter file that corresponds to them
markdownText = read_markdown_cell("./3.Initial_Species_Parameters.ipynb", 14)
markdownTable = extract_table(markdownText)
genericParameters.update(parseTableGenericParameters(markdownTable))
# print(genericParameters)

# Now, we change any mention of the species name toward a species code usable in LANDIS-II
speciesCodeDict = {"Abies balsamea" : "abiebals",
                   "Acer rubrum" : "acerrubr",
                   "Picea mariana" : "picemari"}
for key in speciesCodeDict.keys():
    coreSpeciesParameters = replace_in_dict(coreSpeciesParameters, key, speciesCodeDict[key])
    PnETSpeciesParametersFinal = replace_in_dict(PnETSpeciesParametersFinal, key, speciesCodeDict[key])

# We print the dictionnaries for verification
print(coreSpeciesParameters)
print(PnETSpeciesParametersFinal)
print(genericParameters)

# We save the dictionnary in a file to use it later in other notebooks.
with open('./SpeciesParametersSets/Initial/initialCoreSpeciesParameters.json', 'w') as json_file:
    # Step 4: Write the dictionary to the file
    json.dump(coreSpeciesParameters, json_file)
with open('./SpeciesParametersSets/Initial/initialPnETSpeciesParameters.json', 'w') as json_file:
    # Step 4: Write the dictionary to the file
    json.dump(PnETSpeciesParametersFinal, json_file)
with open('./SpeciesParametersSets/Initial/InitialGenericParameters.json', 'w') as json_file:
    # Step 4: Write the dictionary to the file
    json.dump(genericParameters, json_file)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[1], line 22[0m
[1;32m     20[0m PnETSpeciesParametersFinal [38;5;241m=[39m [38;5;28mdict[39m()
[1;32m     21[0m PnETSpeciesParametersFinal [[38;5;124m'[39m[38;5;124mLandisData[39m[38;5;124m'[39m] [38;5;241m=[39m [38;5;124m'[39m[38;5;124mPnETSpeciesParameters[39m[38;5;124m'[39m
[0;32m---> 22[0m PnETSpeciesParametersFinal[[38;5;124m'[39m[38;5;124mPnETSpeciesParameters[39m[38;5;124m'[39m] [38;5;241m=[39m [43mPnETSpeciesParameters[49m
[1;32m     23[0m markdownText [38;5;241m=[39m read_markdown_cell([38;5;124m"[39m[38;5;124m./3.Initial_Species_Parameters.ipynb[39m[38;5;124m"[39m, [38;5;241m12[39m)
[1;32m     24[0m markdownTable [38;5;241m=[39m extract_table(markdownText)

[0;31mNameError[0m: name 'PnETSpeciesParameters' is not defined

